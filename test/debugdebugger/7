I saw a module called test.bc!
Running with invariants turned on
Function: main
Function: llvm.dbg.declare
Function: printf
Function: switch_view
EC Size:	 Ind. Call-sites
0 : 0
Total Ind. Call-sites: 0
Total Tgts: 0
Average CFI: -nan
Function: main
Function: llvm.dbg.declare
Function: printf
Function: switch_view
EC Size:	 Ind. Call-sites
0 : 0
Total Ind. Call-sites: 0
Total Tgts: 0
Average CFI: -nan
Cannot enable the TUI when output is not a terminal
Cannot enable the TUI when output is not a terminal
Cannot enable the TUI when output is not a terminal
Cannot enable the TUI when output is not a terminal
; ModuleID = 'test.bc'
source_filename = "test.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [7 x i8] c"%d %d\0A\00", align 1
@kaliMap = common global [100 x i8*] zeroinitializer
@"cons id" = constant [2 x i64] [i64 1, i64 2]
@"cons id.6" = constant [1 x i64] [i64 3]

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 !dbg !7 {
entry:
  %a = alloca i32, align 4
  %0 = ptrtoint i32* %a to i64
  call void @recordTarget(i32 1, i64 %0)
  %b = alloca i32, align 4
  %1 = ptrtoint i32* %b to i64
  call void @recordTarget(i32 2, i64 %1)
  %c = alloca i32, align 4
  %2 = ptrtoint i32* %c to i64
  call void @recordTarget(i32 3, i64 %2)
  %p = alloca i32*, align 8
  %q = alloca i32*, align 8
  %k = alloca i32, align 4
  %m = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i32* %a, metadata !11, metadata !DIExpression()), !dbg !12
  store i32 10, i32* %a, align 4, !dbg !12
  call void @llvm.dbg.declare(metadata i32* %b, metadata !13, metadata !DIExpression()), !dbg !14
  store i32 20, i32* %b, align 4, !dbg !14
  call void @llvm.dbg.declare(metadata i32* %c, metadata !15, metadata !DIExpression()), !dbg !16
  store i32 30, i32* %c, align 4, !dbg !16
  call void @llvm.dbg.declare(metadata i32** %p, metadata !17, metadata !DIExpression()), !dbg !19
  call void @llvm.dbg.declare(metadata i32** %q, metadata !20, metadata !DIExpression()), !dbg !21
  store i32* %a, i32** %p, align 8, !dbg !22
  store i32* %b, i32** %p, align 8, !dbg !23
  store i32* %c, i32** %q, align 8, !dbg !24
  call void @llvm.dbg.declare(metadata i32* %k, metadata !25, metadata !DIExpression()), !dbg !26
  %3 = load i32*, i32** %p, align 8, !dbg !27
  %4 = bitcast i32** %p to i64*, !dbg !28
  call void @recordTarget(i32 3, i64 0), !dbg !28
  %5 = call i32 @ptdTargetCheck.5(i64* %4, i64 2, i64* getelementptr inbounds ([2 x i64], [2 x i64]* @"cons id", i64 0, i64 0), i64 0), !dbg !28
  %6 = ptrtoint i32* %c to i64, !dbg !28
  call void @recordTarget(i32 3, i64 %6), !dbg !28
  %7 = load i32, i32* %3, align 4, !dbg !28
  store i32 %7, i32* %k, align 4, !dbg !26
  call void @llvm.dbg.declare(metadata i32* %m, metadata !29, metadata !DIExpression()), !dbg !30
  %8 = load i32*, i32** %q, align 8, !dbg !31
  %9 = bitcast i32** %q to i64*, !dbg !32
  %10 = call i32 @ptdTargetCheck.5(i64* %9, i64 1, i64* getelementptr inbounds ([1 x i64], [1 x i64]* @"cons id.6", i64 0, i64 0), i64 0), !dbg !32
  %11 = load i32, i32* %8, align 4, !dbg !32
  store i32 %11, i32* %m, align 4, !dbg !30
  %12 = load i32, i32* %k, align 4, !dbg !33
  %13 = load i32, i32* %m, align 4, !dbg !34
  %14 = getelementptr [7 x i8], [7 x i8]* @.str, i64 0, i64 0
  call void @recordTarget(i32 1, i64 0), !dbg !35
  call void @recordTarget(i32 2, i64 0), !dbg !35
  call void @recordTarget(i32 3, i64 0), !dbg !35
  %call = call i32 (i8*, ...) @printf(i8* %14, i32 %12, i32 %13), !dbg !35
  %15 = ptrtoint i32* %c to i64, !dbg !36
  call void @recordTarget(i32 3, i64 %15), !dbg !36
  %16 = ptrtoint i32* %b to i64, !dbg !36
  call void @recordTarget(i32 2, i64 %16), !dbg !36
  %17 = ptrtoint i32* %a to i64, !dbg !36
  call void @recordTarget(i32 1, i64 %17), !dbg !36
  call void @recordTarget(i32 1, i64 0), !dbg !36
  call void @recordTarget(i32 2, i64 0), !dbg !36
  call void @recordTarget(i32 3, i64 0), !dbg !36
  ret i32 0, !dbg !36
}

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare void @llvm.dbg.declare(metadata %0, metadata %1, metadata %2) #1

declare dso_local i32 @printf(i8* %0, ...) #2

declare void @switch_view()

declare void @updateTgtWInv(i32 %0, i64 %1)

declare void @updateTgtWoInv(i32 %0, i64 %1)

declare void @checkCFI(i32 %0, i64 %1)

declare void @vgepRecordTarget(i32 %0, i64 %1)

declare i32 @ptdTargetCheck(i64* %0, i64 %1, i64* %2)

declare void @updatePWC(i32 %0, i64 %1)

declare i32 @checkPWC(i32 %0, i64 %1, i64 %2)

declare void @vgepRecordTarget.1(i32 %0, i64 %1)

declare i32 @ptdTargetCheck.2(i64* %0, i64 %1, i64* %2)

declare void @updatePWC.3(i32 %0, i64 %1)

declare i32 @checkPWC.4(i32 %0, i64 %1, i64 %2)

declare void @recordTarget(i32 %0, i64 %1)

declare i32 @ptdTargetCheck.5(i64* %0, i64 %1, i64* %2, i64 %3)

attributes #0 = { noinline nounwind optnone uwtable "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nofree nosync nounwind readnone speculatable willreturn }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!3, !4, !5}
!llvm.ident = !{!6}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "clang version 12.0.0 (git@github.com:taptipalit/llvm12.git ea65dbca39f4c80bcd19142d06a5759b3ec89f99)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !2, splitDebugInlining: false, nameTableKind: None)
!1 = !DIFile(filename: "test.c", directory: "/home/tpalit/svf-kernel/test/debugdebugger")
!2 = !{}
!3 = !{i32 7, !"Dwarf Version", i32 4}
!4 = !{i32 2, !"Debug Info Version", i32 3}
!5 = !{i32 1, !"wchar_size", i32 4}
!6 = !{!"clang version 12.0.0 (git@github.com:taptipalit/llvm12.git ea65dbca39f4c80bcd19142d06a5759b3ec89f99)"}
!7 = distinct !DISubprogram(name: "main", scope: !1, file: !1, line: 3, type: !8, scopeLine: 3, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!8 = !DISubroutineType(types: !9)
!9 = !{!10}
!10 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!11 = !DILocalVariable(name: "a", scope: !7, file: !1, line: 4, type: !10)
!12 = !DILocation(line: 4, column: 9, scope: !7)
!13 = !DILocalVariable(name: "b", scope: !7, file: !1, line: 4, type: !10)
!14 = !DILocation(line: 4, column: 17, scope: !7)
!15 = !DILocalVariable(name: "c", scope: !7, file: !1, line: 4, type: !10)
!16 = !DILocation(line: 4, column: 25, scope: !7)
!17 = !DILocalVariable(name: "p", scope: !7, file: !1, line: 5, type: !18)
!18 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !10, size: 64)
!19 = !DILocation(line: 5, column: 10, scope: !7)
!20 = !DILocalVariable(name: "q", scope: !7, file: !1, line: 5, type: !18)
!21 = !DILocation(line: 5, column: 14, scope: !7)
!22 = !DILocation(line: 7, column: 7, scope: !7)
!23 = !DILocation(line: 8, column: 7, scope: !7)
!24 = !DILocation(line: 10, column: 7, scope: !7)
!25 = !DILocalVariable(name: "k", scope: !7, file: !1, line: 12, type: !10)
!26 = !DILocation(line: 12, column: 9, scope: !7)
!27 = !DILocation(line: 12, column: 14, scope: !7)
!28 = !DILocation(line: 12, column: 13, scope: !7)
!29 = !DILocalVariable(name: "m", scope: !7, file: !1, line: 13, type: !10)
!30 = !DILocation(line: 13, column: 9, scope: !7)
!31 = !DILocation(line: 13, column: 14, scope: !7)
!32 = !DILocation(line: 13, column: 13, scope: !7)
!33 = !DILocation(line: 15, column: 23, scope: !7)
!34 = !DILocation(line: 15, column: 26, scope: !7)
!35 = !DILocation(line: 15, column: 5, scope: !7)
!36 = !DILocation(line: 16, column: 1, scope: !7)
CDF:
Test,0, 0,0.000000
Test,1, 0,0.000000
